# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '3fbe7051-713d-4a0a-8e12-ef93197fd49b'
  imageRepository: 'cryptomicroservice'
  containerRegistry: 'registrocontainecryptomicroservice.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  dockerComposeFile: 'docker-compose.yml'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'registrocontainecryptomicroservice69925adc-auth'
  acrUsername: 'registrocontainecryptomicroservice'  # Substitua pelo seu nome de usu√°rio do ACR
  acrPassword: 'Pl2vqEj1oIWt0drqfPh/wOka2F9V8BTTHOblT/pOue+ACRBKj2uj'    # Substitua pela sua senha do ACR

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:    
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '7.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - script: |
        # Resto dos comandos de build aqui
        pwd
        dotnet build
        docker-compose -f $(dockerComposeFile) build
        docker login registrocontainecryptomicroservice.azurecr.io -u $(acrUsername) -p $(acrPassword)
        docker-compose -f $(dockerComposeFile) push
      displayName: 'Build and Push Docker Images'
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'CryptoMicroService-7160.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
